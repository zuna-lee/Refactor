package zuna.refactoring.code;

import java.util.HashSet;

import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jdt.core.IField;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.dom.FieldDeclaration;

import zuna.model.MyClass;
import zuna.model.MyField;
import zuna.refactoring.ProjectAnalyzer;
import zuna.refactoring.ui.views.classDecomposesrViews.graph.ExtractionHelper;


public class FieldChanger extends ChangeRewrite{

	private String fieldType;
	private String fieldIdentifier;
	private IType targetType;
	private HashSet<IType> callerClasses;
	private IType type;
	private FieldDeclaration fieldDecl = null;
	
	public FieldChanger(IType targetType, HashSet<IType> callerClasses){
		this.targetType = targetType;
		this.callerClasses = callerClasses;
	}
	
	public String getFieldIdentifier() {
		return fieldIdentifier;
	}

	public void modify(){
		try {
			for(IType type: callerClasses){
				this.type = type;
				String fieldDecl = this.getFieldDecl(targetType);
//				if(this.type.getField(this.fieldIdentifier) == null){
					this.type.createField(fieldDecl, null, false, new NullProgressMonitor());
					this.addField();
//				}
			}
		} catch (JavaModelException e) {
			e.printStackTrace();
		}
	}
	
	
	
	private String getFieldDecl(IType newClass){
		fieldType = newClass.getElementName();
		fieldIdentifier = fieldType.toLowerCase();
		return "private " + fieldType + " " + fieldIdentifier + " = new " + fieldType + "();"; 
	}

	private void addField(){
		String parentID =this.type.getFullyQualifiedName();
		String id = parentID + "." + this.fieldIdentifier;
		String fieldType = this.fieldType;
		IField newField =  this.type.getField(this.fieldIdentifier);
		CompilationUnit cu = ExtractionHelper.parse(newField.getCompilationUnit());
		
		cu.accept(new ASTVisitor(){
			public boolean visit(FieldDeclaration fd){
				fieldDecl = fd;
				return false;
			}
		});
		
		FieldDeclaration fd = this.fieldDecl;
		MyClass parent = ProjectAnalyzer.project.getClass(parentID);
		MyField newMyField = new MyField(id, fieldType, parent, fd);
		parent.getOwendField().add(newMyField);
		
		ProjectAnalyzer.project.getClassList().put(parent.getID(), parent);
		ProjectAnalyzer.project.getFieldList().put(newMyField.getID(), newMyField);
	}
	
	
}
