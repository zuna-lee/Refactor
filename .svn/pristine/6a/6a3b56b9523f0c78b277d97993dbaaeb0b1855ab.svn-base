package zuna.refactoring.codeChanger;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.ui.actions.OrganizeImportsAction;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IWorkbenchPartSite;
import org.eclipse.ui.IWorkbenchSite;
import org.eclipse.ui.PlatformUI;


public class ImportChanger {

	
	public void change(IProject project){
		try {
			final IWorkbenchPartSite targetSite = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService()
			.getActivePart().getSite();

			    if(targetSite!=null){ 
			    System.out.println("TargetSite obtained");
			    organizeImports(project, targetSite);
			    }

			} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			}
	}
	
	public void organizeImports(final IProject project, final IWorkbenchSite targetSite) throws CoreException {
		Runnable job = new Runnable() {
			@Override
			public void run() {
			    OrganizeImportsAction org = new OrganizeImportsAction(targetSite);
			        try {
			          IJavaProject prj = null;
			          if (project.hasNature("org.eclipse.jdt.core.javanature")) {
			          prj = JavaCore.create(project);
			        }
		
			        IStructuredSelection selection = new StructuredSelection(prj);
			        org.run(selection);
			             } catch (CoreException ce) {
			        ce.printStackTrace();
			    }
			}
		};
		Display.getDefault().syncExec(job);
//	    this.getShell().getDisplay().syncExec(job);
	}
}
