package zuna.refactoring.ui.views.classDecomposesrViews.graph;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Point2D;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

import org.eclipse.swt.widgets.Display;

import zuna.refactoring.ui.views.classDecomposesrViews.graph.MyGraph.MyLink;
import zuna.refactoring.ui.views.classDecomposesrViews.graph.MyGraph.MyNode;
import zuna.refactoring.ui.views.classDecomposesrViews.graph.icon.MyIcon;
import edu.uci.ics.jung.algorithms.layout.GraphElementAccessor;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.AbstractPopupGraphMousePlugin;

/**
 * a GraphMousePlugin that offers popup
 * menu support
 */
public class PopupGraphMousePlugin extends AbstractPopupGraphMousePlugin
implements MouseListener {

	ResultViewer view;
    public PopupGraphMousePlugin(ResultViewer view) {
        this(MouseEvent.BUTTON3_MASK, view);
    }
    
    public PopupGraphMousePlugin(int modifiers, ResultViewer view) {
        super(modifiers);
        this.view = view;
    }

    /**
     * If this event is over a station (vertex), pop up a menu to
     * allow the user to perform a few actions; else, pop up a menu over the layout/canvas
     *
     * @param e
     */
    protected void handlePopup(MouseEvent e) {
        final VisualizationViewer<MyNode,MyLink> vv =  (VisualizationViewer<MyNode,MyLink>)e.getSource();
        final Point2D p = e.getPoint();
        final Point2D ivp = p;
        MyIcon myIcon = new MyIcon();
        myIcon.create();
        GraphElementAccessor<MyNode,MyLink> pickSupport = vv.getPickSupport();
        if(pickSupport != null) {
            final MyNode station = pickSupport.getVertex(vv.getGraphLayout(), ivp.getX(), ivp.getY());
            
            if(station!=null){
				JPopupMenu changeClusterMenu = new JPopupMenu();
				
				if(this.view.getResult().size()>1){
					JMenu submenu = new JMenu("Merge To");
					int currentCluster = this.getClusterOfSelectedNode(station.id);
					for(int i = 0 ; i < this.view.getResult().size() ; i++){
						if(i!=currentCluster){
							final int idx = i;
							JMenuItem menuItem = new JMenuItem("Cluster " + i);
							ImageIcon icon = new ImageIcon(myIcon.getImageURL(i));
							menuItem.setIcon(icon);
							menuItem.addActionListener(new ActionListener(){
								@Override
								public void actionPerformed(ActionEvent e) {
									// TODO Auto-generated method stub
									Display.getDefault().syncExec(new Runnable() {
									    public void run() {
									    	boolean redrawed = view.merge(station.id, idx);
									    	if(redrawed) view.redraw(ResultViewer.wf, true);
									    }
									});
								}
							});
							submenu.add(menuItem);
						}
					}
					changeClusterMenu.add(submenu);
				}
				
				
				if(station.isMethod()){
					JMenuItem submenu2 = new JMenuItem("Split");
					submenu2.addActionListener(new ActionListener(){
						@Override
						public void actionPerformed(ActionEvent e) {
							// TODO Auto-generated method stub
							Display.getDefault().syncExec(new Runnable() {
							    public void run() {
							    	boolean isSplit = view.split(station.id);
							    	if(isSplit) view.redraw(ResultViewer.wf, true);
							    }
							});
						}
					});
					changeClusterMenu.add(submenu2);
				}
				changeClusterMenu.show(vv, e.getX(), e.getY());
            }
        }
    }
    
    private int getClusterOfSelectedNode(String from){
    	for(int i = 0 ; i < view.getResult().size() ; i++){
    		Vector<String> cluster =  view.getResult().get(i);
    		for(String c: cluster){
    			if(c.equals(from)){
    				return i; 
    			}
    		}
    	}
    	
    	return -1;
    }
    
}
