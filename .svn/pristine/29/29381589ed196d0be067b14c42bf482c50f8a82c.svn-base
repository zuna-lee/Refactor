package zuna.refactoring.codeChanger;

import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IMethod;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.rewrite.ASTRewrite;
import org.eclipse.jdt.internal.corext.refactoring.structure.ASTNodeSearchUtil;
import org.eclipse.jface.text.Document;
import org.eclipse.text.edits.TextEdit;

import zuna.model.MyMethod;
import zuna.refactoring.ui.views.classDecomposesrViews.graph.ExtractionHelper;

public abstract class ChangeRewrite {

	protected MyMethod m;
	protected ASTRewrite rewrite;
	protected Document document;
	protected ICompilationUnit cu;
	protected MethodDeclaration md;
	protected CompilationUnit classUnit;
	protected ICompilationUnit workingCopy;
	
	public void change(){
		try {
			this.modify();
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	protected void init(){
		
	}
	
	
	public MethodDeclaration getMd() {
		return md;
	}


	protected abstract void modify();
	
	protected void save() throws Exception {
		// computation of the text edits
		   TextEdit edits = rewrite.rewriteAST(document, cu.getJavaProject().getOptions(true));

		   // computation of the new source code
		   edits.apply(document);
		   String newSource = document.get();

		   // update of the compilation unit
		   workingCopy.getBuffer().setContents(newSource);
		   workingCopy.commitWorkingCopy(false, null);
		   workingCopy.discardWorkingCopy();
	}
	
	protected CompilationUnit setCompilationUnit() {
		ASTParser parser = ASTParser.newParser(AST.JLS4);
		parser.setSource(cu);
		classUnit = (CompilationUnit) parser.createAST(null);
		return classUnit;
	}

	protected void setDocument() throws JavaModelException {
		String source = cu.getSource();
		document= new Document(source);
	}
	
	protected MethodDeclaration getMethodDecl(IMethod method) throws JavaModelException{
		IType declaringType = method.getDeclaringType().getTypeRoot().findPrimaryType();
		CompilationUnit cu = ExtractionHelper.parse(declaringType.getCompilationUnit());
		return ASTNodeSearchUtil.getMethodDeclarationNode(method, cu);
	}


}