package zuna.mining.gap;

import org.jgap.Chromosome;
import org.jgap.Configuration;
import org.jgap.FitnessFunction;
import org.jgap.Gene;
import org.jgap.Genotype;
import org.jgap.IChromosome;
import org.jgap.InvalidConfigurationException;
import org.jgap.impl.DefaultConfiguration;

public class MainTest {

	/**
	 * @param args
	 * @throws InvalidConfigurationException
	 */
	public static void main(String[] args) throws InvalidConfigurationException {

		Configuration conf = new DefaultConfiguration();
		FitnessFunction myFunc = new MyFitnessFunction(null);
		conf.setFitnessFunction(myFunc);

		int size = 13;
		Gene[] sampleGenes = new Gene[size];

		for (int i = 0; i < size; i++) {
			
			sampleGenes[i] = new MyGene(conf, 0, 4, null); // Pennies
		}

		Chromosome sampleChromosome = new Chromosome(conf, sampleGenes);

		conf.setSampleChromosome(sampleChromosome);
		conf.setPopulationSize(500);

		Genotype population = Genotype.randomInitialGenotype(conf);
		population.evolve();
		IChromosome bestSolutionSoFar;

		for (int i = 0; i < 100; i++) {
			population.evolve();
			IChromosome cur = population.getFittestChromosome();
			for (int k = 0; k < cur.getGenes().length; k++)
				System.out.print(cur.getGene(k).getAllele());

			System.out.println(" : " + cur.getFitnessValue());

		}
		bestSolutionSoFar = population.getFittestChromosome();
		System.out.println("The best solution contained the following: ");

	}

}
