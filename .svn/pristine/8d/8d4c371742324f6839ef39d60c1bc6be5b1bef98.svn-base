package zuna.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.jdt.core.dom.IMethodBinding;
import org.eclipse.jdt.core.dom.ITypeBinding;
import org.eclipse.jdt.core.dom.MethodDeclaration;


public class MyMethod extends Element implements Cloneable, Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6871156752143359642L;
	private boolean support;
	private MyClass parent;
	private String name;
	private ArrayList<MyMethod> fanOut = new ArrayList<MyMethod>();
	private ArrayList<MyMethod> fanIn = new ArrayList<MyMethod>();
	private ArrayList<MyParameter> parameters = new ArrayList<MyParameter>();
	private MyIdentifier identifier = new MyIdentifier();
	
	private int statementCnt = 0;
	private boolean override;
	private boolean isStatic;
	private ArrayList<MyField> reffedField = new ArrayList<MyField>();
	private int noOfParams = 0;
	private MethodDeclaration md;
	
	public boolean isStatic() {
		return isStatic;
	}


	public void setStatic(boolean isStatic) {
		this.isStatic = isStatic;
	}


	public void setMd(MethodDeclaration md) {
		this.md = md;
	}


	public Object clone() throws CloneNotSupportedException {
		MyMethod clone = (MyMethod) super.clone();
		clone.parameters = (ArrayList<MyParameter>) parameters.clone();
		clone.statementCnt = statementCnt;
		clone.support = (boolean) support;
		return clone;
	}
	
	public boolean isSupport() {
		return this.getStatementCnt()==1;
	}
	
	public void setSupport(boolean support) {
		this.support = support;
	}


	public int getStatementCnt() {
		return statementCnt;
	}



	public boolean isOverride() {
		return override;
	}



	public void setParent(MyClass parent) {
		this.parent = parent;
	}

	
	
	public int getNoOfParams() {
		return noOfParams;
	}



	public void setNoOfParams(int noOfParams) {
		this.noOfParams = noOfParams;
	}





	public void addReffedField(MyField reffedField) {
		this.reffedField.add(reffedField);
	}



	public String getName() {
		return name;
	}

	public ArrayList<MyMethod> getFanIn() {
		return fanIn;
	}


	public void setFanOut(ArrayList<MyMethod> fanOut) {
		this.fanOut = fanOut;
	}

	public void setFanIn(ArrayList<MyMethod> fanIn) {
		this.fanIn = fanIn;
	}

	public ArrayList<MyParameter> getParameters() {
		return parameters;
	}


	public void setParameters(ArrayList<MyParameter> parameters) {
		this.parameters = parameters;
	}
	
	public int getParameterCount() {
		
		return parameters.size();
	}
	
	public MyIdentifier getIdentifier() {
		return identifier;
	}
	
	public void setIdentifier(MyIdentifier identifier) {
		this.identifier = identifier;
	}

	public String toStringParameters() {
		
		String str = "";
		
		for (MyParameter myParameter : parameters) {
			
			str += myParameter.toString();
			str += "\t";
		}
		
		return str;
	}
	
	public String toStringParameters2() {
		
		String str = "";
		
		for (MyParameter myParameter : parameters) {
			
			str += myParameter.getType();
			str += ".";
			str += myParameter.getName();
			str += "\t";
			str += myParameter.getType();
			str += "\t";
			str += myParameter.getName();
			str += "\t";
		}
		
		return str;
	}
	
	public String toStringIdentifiers() {
		
		return identifier.toString();
	}
	
	public void setOverride(boolean override) {
		this.override = override;
	}

	@SuppressWarnings("unchecked")
	public MyMethod(MethodDeclaration methodDecl, IMethodBinding md, MyClass parent) {
		super(MyMethod.makeMethodFullName(md), parent == null? false : parent.isLibrary());
		
		this.name = md.getName();
		this.parent = parent;
		this.md = methodDecl;
		super.setModifier(methodDecl.modifiers());
		if(parent != null) {
			parent.addMethod(this);
		}
	}
	
	
	public MyMethod(String id, String name, boolean lib) {
		super(id, lib);
		this.name = name;
	}
	
	public void addParameter(String type, String identifier){
		for(MyParameter param: this.parameters){
			if(param.getName().equals(identifier)){
				return;
			}
		}
		MyParameter newParam = new MyParameter(this, type, identifier);
		this.parameters.add(newParam);
	}
	
	public MethodDeclaration getMd() {
		return md;
	}



	public void addFanOutMethod(MyMethod fanOutMethod) {
		this.fanOut.add(fanOutMethod);
	}

	@Override
	public void display() {
		System.out.println("Method [" + getID() + "]");
		for(MyMethod method : fanOut) {
			System.out.println("fanOut [" + method.getID()  + "]");
		}
		for (MyMethod method : fanIn) {
			System.out.println("fanIn [" + method.getID()  + "]");
		}
	}
	
	public ArrayList<MyMethod> getFanOut() {
		return this.fanOut;
	}
	
	public void addFanInMethod(MyMethod fanInMethod) {
		if(!this.fanIn.contains(fanInMethod)){
			this.fanIn.add(fanInMethod);	
		}
		
	}
	
	public MyClass getParent() {
		return parent;
	}
	
	public static String makeMethodFullName(IMethodBinding md) {
		String className = null;
		
		if(md.getDeclaringClass() == null) {
			className = "Anonymous";
		} else {
			className = md.getDeclaringClass().getQualifiedName();
			if( className.contains("<") ) {
				int start, last;
				String tempName = null;
				start = className.indexOf("<");
				last = className.indexOf(">");
				tempName= className.substring(0, start);
				tempName += className.substring(last + 1, className.length());
				className = tempName;
			}
		}
		
		String methodFullname =  className + "." + md.getName() + "(";
		
		ITypeBinding[] para = md.getParameterTypes();
		
		for (int i = 0; i < para.length; i++) {
			//ITypeBinding[] test = para[i]className.();
			/*String test = para[i].toString();
			if(test.contains(" extends ")) {
				String[] extendClassFullName = test.split(" extends ");
				String[] extendClassName = extendClassFullName[1].split("\\.");
				methodFullname += extendClassName[extendClassName.length];
			} else {
				methodFullname += para[i].getName() + " " ;				
			}*/
			methodFullname += para[i].getName() + " " ;	
		}
		return methodFullname + ")";
	}

	public static String makeMethodSignature(IMethodBinding imb) {
		String name = "";
		
		String justName = imb.getName().trim();
		ITypeBinding[] para = imb.getParameterTypes();
		
		name = justName + "-";
		for(ITypeBinding t : para){
			name += t.getName().trim() + "-" ;
		}
		
		return name;
	}
	
	public static String makeMethodSignature(MethodDeclaration md) {
		String name = "";
		String justName = md.getName().toString();
		List param = md.parameters();
		
		name = justName + "-";
		Iterator iter = param.iterator();
		while(iter.hasNext()){
			name += iter.next().toString().split(" ")[0] + "-" ;
		}
		
		return name;
	}

	private static String makeNestedClassName(String qualifiedName) {

		//parameter type이 inner class인 경우. 마지막 class명만
		String[] classNames = qualifiedName.split("\\.");
		if(classNames.length > 0) {
			qualifiedName = classNames[classNames.length-1];			
		}
		return qualifiedName;
	}



	public void setStatementCnt(int count) {
		this.statementCnt = count;
	}


	public ArrayList<MyField> getReferencedField() {
		return this.reffedField ;
	}
}
