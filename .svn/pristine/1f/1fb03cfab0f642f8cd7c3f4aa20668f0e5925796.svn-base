package zuna.refactoring.ui.views.classDecomposesrViews.graph.icon;

import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.Hashtable;

import javax.imageio.ImageIO;

import zuna.refactoring.ProjectAnalyzer;
import zuna.refactoring.ui.views.classDecomposesrViews.graph.MyGraph;


public class MyIcon{
	private Hashtable<Integer, String> icons = new Hashtable<Integer, String>();
	public static String folder;
	
	public String getImageURL(int cluster){
		return icons.get(cluster);
	}
	
	public void create(){
		int width = 20;
		int height = 20;
		
		for(int cluster: MyGraph.table.keySet()){
			
			
			BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
			
			WritableRaster raster = image.getRaster();
			for (int i=0; i<width; i++ ) {
			    for (int  j=0; j<height; j++ ) {
			        int[] colorArray = MyGraph.table.get(cluster);
			        
			        raster.setPixel(i, j, colorArray);
			    }
			}

			try {
				folder = ProjectAnalyzer.iproject.getWorkspace().getRoot().getLocation().toFile().getAbsolutePath()
						+ "/" + ProjectAnalyzer.iproject.getName() + "/" + "icon/";
				File dir = new File(folder);
				if(!dir.exists()) dir.mkdirs();
				String url = folder+ cluster + ".gif";
				File gif = new File(url);
				ImageIO.write(image, "gif", gif);
				icons.put(cluster, url);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
