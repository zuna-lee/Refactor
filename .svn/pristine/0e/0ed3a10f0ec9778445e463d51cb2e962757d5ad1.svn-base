package zuna.refactoring.code;

import java.util.ArrayList;
import java.util.HashSet;

import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IMember;
import org.eclipse.jdt.core.IMethod;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.Signature;
import org.eclipse.jdt.internal.corext.callhierarchy.CallHierarchy;
import org.eclipse.jdt.internal.corext.callhierarchy.MethodCall;
import org.eclipse.jdt.internal.corext.callhierarchy.MethodWrapper;

import zuna.model.MyMethod;

@SuppressWarnings("restriction")
public class Caller {
	private HashSet<IMethod> callerMethods = new HashSet<IMethod>();
	private HashSet<IType> callerClasses = new HashSet<IType>();
	private IMethod callee;
	public HashSet<IMethod> getCallerMethods() {
		return callerMethods;
	}
	
	public HashSet<IType> getCallerClasses() {
		return callerClasses;
	}

	public Caller(IMethod callee){
		this.callee = callee;
	}

	public HashSet<IType> makeCallerClassSet() {
		for(IMethod m: callerMethods){
			IType type = m.getDeclaringType();
			if(!callerClasses.contains(type)){
				callerClasses.add(type);
			}
		}
		
		return this.callerClasses;
	}
	
	public void getCallersOf(ArrayList<MyMethod> movingMethods) {
		try{
		 CallHierarchy callHierarchy = CallHierarchy.getDefault();
		 IMember[] members = {this.callee};
		 MethodWrapper[] methodWrappers = callHierarchy.getCallerRoots(members);
		  
		  for (MethodWrapper mw : methodWrappers) {
		    MethodWrapper[] mw2 = mw.getCalls(new NullProgressMonitor());
		    HashSet<IMethod> temp = getIMethods(mw2);
		    callerMethods.addAll(temp);
		   }
		}catch(java.lang.NullPointerException e){
			e.printStackTrace();
		}
	}
		 
	private HashSet<IMethod> getIMethods(MethodWrapper[] methodWrappers) {
		HashSet<IMethod> c = new HashSet<IMethod>();
		for (MethodWrapper m : methodWrappers) {
			IMethod im = getIMethodFromMethodWrapper(m);
			if (im != null){// && !isIntheCluster(im, movingMethods)) {
				c.add(im);
			}
		}
		return c;
	}
	
	private boolean isIntheCluster(IMethod m, ArrayList<MyMethod> movingMethods){
		
		String name = m.getElementName();
		String[] params = m.getParameterTypes();
		params = this.getSimpleName(params);
		for(MyMethod mm: movingMethods){
			if(mm!=null && mm.getName().equals(name) && params.length==mm.getParameters().size()){
				boolean flg = true;
				for(int i = 0 ; i < params.length ; i++){
					if(!params[i].equals(mm.getParameters().get(i).getType())){
						flg = false;
					}
				}
				if(flg) {
					return true;
				}
			}
		}
		return false;
	}
	
	private String[] getSimpleName(String[] compiled){
    	String[] simpleName = new String[compiled.length];
    	for(int i =0 ; i < compiled.length ; i++){
    		simpleName[i] = Signature.getSignatureSimpleName(compiled[i]);
    	}
    	
    	return simpleName;
    }
	
	private IMethod getIMethodFromMethodWrapper(MethodWrapper m) {
		
		try {
			IMember im = m.getMember();
			if (im.getElementType() == IJavaElement.METHOD) {
				return (IMethod)m.getMember();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		  
		return null;
	}
}
