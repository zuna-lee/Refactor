package zuna.refactoring.code;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IField;
import org.eclipse.jdt.core.IMember;
import org.eclipse.jdt.core.IMethod;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.internal.corext.codemanipulation.AddGetterSetterOperation;
import org.eclipse.jdt.internal.corext.codemanipulation.CodeGenerationSettings;
import org.eclipse.jdt.internal.corext.codemanipulation.GetterSetterUtil;
import org.eclipse.jdt.internal.corext.codemanipulation.IRequestQuery;
import org.eclipse.jdt.internal.corext.util.Messages;
import org.eclipse.jdt.internal.ui.JavaPlugin;
import org.eclipse.jdt.internal.ui.actions.ActionMessages;
import org.eclipse.jdt.internal.ui.preferences.JavaPreferencesSettings;
import org.eclipse.jdt.internal.ui.viewsupport.BasicElementLabels;
import org.eclipse.jdt.ui.JavaElementLabels;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.jface.text.Document;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.text.edits.MalformedTreeException;
import org.eclipse.text.edits.TextEdit;


@SuppressWarnings("restriction")
public class GetterSetterGenerator {
	
	public void generate(ICompilationUnit cu, IField[] field){
		
		try {
			for(int i = 0 ; i < field.length ; i++){
				IMethod getter = GetterSetterUtil.getGetter(field[i]);
				IMethod setter = GetterSetterUtil.getSetter(field[i]);
				System.out.println(getter.getSource());
				System.out.println(setter.getSource());
			}
		} catch (JavaModelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public IMethod getGetter(ICompilationUnit unit, CompilationUnit cu, IField field){
		IMethod getter = null;
		IField[] getterField = new IField[1];
		getterField[0] = field;
		IType type = cu.getTypeRoot().findPrimaryType();
		try {
			CodeGenerationSettings setting = JavaPreferencesSettings.getCodeGenerationSettings(unit.getJavaProject());
			setting.createComments = true;
			getter = GetterSetterUtil.getGetter(field);
			
//			IRequestQuery query = 
			AddGetterSetterOperation op= new AddGetterSetterOperation(type, getterField, null, null,
					cu, null,  type, setting, true, false);
			op.run(new NullProgressMonitor());
			
		} catch (JavaModelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (CoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return getter;
	}
	
	
	private IRequestQuery skipReplaceQuery() {
		return new IRequestQuery() {
			public int doQuery(IMember method) {
				int[] returnCodes= { IRequestQuery.YES, IRequestQuery.NO, IRequestQuery.YES_ALL, IRequestQuery.CANCEL};
				String skipLabel= ActionMessages.AddGetterSetterAction_SkipExistingDialog_skip_label; 
				String replaceLabel= ActionMessages.AddGetterSetterAction_SkipExistingDialog_replace_label; 
				String skipAllLabel= ActionMessages.AddGetterSetterAction_SkipExistingDialog_skipAll_label; 
				String[] options= { skipLabel, replaceLabel, skipAllLabel, IDialogConstants.CANCEL_LABEL};
				String methodName= JavaElementLabels.getElementLabel(method, JavaElementLabels.M_PARAMETER_TYPES);
				String formattedMessage= Messages.format(ActionMessages.AddGetterSetterAction_SkipExistingDialog_message, BasicElementLabels.getJavaElementName(methodName)); 
				return showQueryDialog(formattedMessage, options, returnCodes);
			}
		};
	}
	
	@SuppressWarnings("unused")
	private int showQueryDialog(final String message, final String[] buttonLabels, int[] returnCodes) {
		final Shell shell= new Shell();
		if (shell == null) {
			JavaPlugin.logErrorMessage("AddGetterSetterAction.showQueryDialog: No active shell found"); //$NON-NLS-1$
			return IRequestQuery.CANCEL;
		}
		final int[] result= { Window.CANCEL};
		shell.getDisplay().syncExec(new Runnable() {
			public void run() {
				String title= ActionMessages.AddGetterSetterAction_QueryDialog_title; 
				MessageDialog dialog= new MessageDialog(shell, title, null, message, MessageDialog.QUESTION, buttonLabels, 0);
				result[0]= dialog.open();
			}
		});
		
		int returnVal= result[0];
		return returnVal < 0 ? IRequestQuery.CANCEL : returnCodes[returnVal];
	}
		
		
		
	
	public IMethod getSetter(ICompilationUnit cu, IField field){
		IMethod setter = null;
		try {
			setter = GetterSetterUtil.getSetter(field);
		} catch (JavaModelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return setter;
	}

	public IMethod getGetter(IField field){
		IMethod getter = null;
		try {
			getter = GetterSetterUtil.getGetter(field);
			AccessModifierChanger accessChanger = new AccessModifierChanger(getter);
			accessChanger.change();
//			getter = accessChanger.getIMethod();
		} catch (JavaModelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return getter;
	}
	
	public void generate(ICompilationUnit sourceUnit, CompilationUnit cu, IField referredField) throws MalformedTreeException, BadLocationException {
		IMethod getter = null;
		IField[] getterField = new IField[1];
		IField[] setterField = new IField[0];
		IField[] getterSetterField = new IField[0];
		getterField[0] = referredField;
		IType type = cu.getTypeRoot().findPrimaryType();
		try {
			CodeGenerationSettings setting = JavaPreferencesSettings.getCodeGenerationSettings(sourceUnit.getJavaProject());
			setting.createComments = true;
			getter = GetterSetterUtil.getGetter(referredField);
			
//			IRequestQuery query = 
			AddGetterSetterOperation op= new AddGetterSetterOperation(type, getterField, setterField, getterSetterField,
					cu, skipReplaceQuery(),  type, setting, true, false);
			
			op.run(new NullProgressMonitor());
			
			TextEdit edit = op.getResultingEdit();
			Document doc = new Document();
			edit.apply(doc);
			
			String newSource = doc.get();
			
//			Document doc = null;
//		    // computation of the new source code
//		    edit.apply(doc);
//		    String newSource = doc.get();

		    // update of the compilation unit
		    sourceUnit.getBuffer().setContents(newSource);
		    sourceUnit.commitWorkingCopy(false, null);
		   
		    sourceUnit.discardWorkingCopy();
			   
		} catch (JavaModelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (CoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

}
